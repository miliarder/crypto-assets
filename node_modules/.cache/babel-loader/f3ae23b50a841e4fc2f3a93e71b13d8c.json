{"ast":null,"code":"var _jsxFileName = \"/Users/sandro.brayen/Documents/private-project/crypto-asset/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ImageMasonry from 'react-image-masonry';\nimport { Chart } from 'react-google-charts';\nimport Item from './components/Item';\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatter = new Intl.NumberFormat('id', {\n  style: 'currency',\n  currency: 'IDR',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0\n});\nconst pairs = {\n  btc_idr: {\n    asset: 0.01961562,\n    name: 'BTC',\n    color: '#EBAC1C'\n  },\n  xrp_idr: {\n    asset: 156.46,\n    name: 'XRP',\n    color: '#5CACDD'\n  },\n  theta_idr: {\n    asset: 146.9453,\n    name: 'THETA',\n    color: '#5C50DD'\n  },\n  tfuel_idr: {\n    asset: 615.8526,\n    name: 'TFUEL',\n    color: '#CFE542'\n  },\n  ada_idr: {\n    asset: 760.179809,\n    name: 'ADA',\n    color: '#1365EA'\n  },\n  bnb_idr: {\n    asset: 0.7497604,\n    name: 'BNB',\n    color: '#FC5731'\n  }\n};\nconst modal = 47371052;\nlet timer;\nexport default function App() {\n  _s();\n\n  const [grandTotal, setTotal] = useState(0);\n  const [summary, setSummary] = useState({});\n  const [precent, setPercent] = useState(0);\n  useEffect(() => {\n    clearInterval(timer);\n\n    const fetchData = async () => {\n      try {\n        const res = await fetch(`https://indodax.com/api/summaries`, {\n          cache: 'no-cache'\n        });\n        const data = await res.json();\n        const {\n          tickers\n        } = data;\n        let total = 0;\n        const summaryData = {};\n        let keys = Object.keys(pairs);\n\n        for (let i = 0; i < keys.length; i++) {\n          let key = keys[i];\n          const coin = pairs[key].asset;\n          const name = pairs[key].name;\n          const color = pairs[key].color;\n          const {\n            last: price\n          } = tickers[key];\n          const v = coin * Number(price);\n          summaryData[key] = {\n            color,\n            name,\n            coin,\n            price: price,\n            total: v\n          };\n          total += v;\n        }\n\n        const growthPercent = ((total - modal) / (modal / 100)).toFixed(1);\n        setTotal(total);\n        setSummary(summaryData);\n        setPercent(growthPercent);\n        document.title = `My Gain:  ${formatter.format(total - modal)} (${growthPercent}%)`;\n        timer = setTimeout(() => {\n          fetchData();\n        }, 3000);\n      } catch (e) {\n        console.log('error', e);\n        fetchData();\n      }\n    };\n\n    fetchData();\n  }, []);\n  const isLoss = grandTotal < modal;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-responsive table-striped\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          className: \"thead-dark\",\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Asset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Price\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Total\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [Object.keys(summary).map(key => {\n            const {\n              coin,\n              price,\n              total,\n              name\n            } = summary[key];\n            return /*#__PURE__*/_jsxDEV(Item, {\n              coin: coin,\n              price: price,\n              name: name,\n              total: total\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(Item, {\n            price: \"Total:\",\n            total: grandTotal,\n            isBold: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: 20\n      },\n      children: grandTotal > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `alert ${isLoss ? 'alert-danger' : 'alert-success'}`,\n        children: [\"Gain\", ' ', /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [formatter.format(grandTotal - modal), \" (\", precent, \"%)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: 500,\n        maxWidth: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(Chart, {\n        width: '100%',\n        height: '300px',\n        chartType: \"PieChart\",\n        loader: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading Chart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 19\n        }, this),\n        data: [['Asset', 'Value'], ...Object.keys(summary).map(key => {\n          const {\n            coin,\n            price,\n            total,\n            name,\n            color\n          } = summary[key];\n          return [name, total];\n        })],\n        rootProps: {\n          'data-testid': '1'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ImageMasonry, {\n      imageUrls: ['https://media.giphy.com/media/XUojAIMYIIOQ9tpx2s/giphy.gif', 'https://media.giphy.com/media/mz7iww9tCUnJJeZvGN/giphy.gif', 'https://media.giphy.com/media/sTgTWEcVGK7CW3BQa7/giphy.gif', 'https://media.giphy.com/media/DxbAro4C39Qi5kJmPb/giphy.gif', 'https://media.giphy.com/media/qjSxTWJxqH4YDuIrOs/giphy.gif', 'https://media.giphy.com/media/KI9oNS4JBemyI/giphy.gif', 'https://media.giphy.com/media/7FBY7h5Psqd20/giphy.gif', 'https://media.giphy.com/media/Ogak8XuKHLs6PYcqlp/giphy.gif', 'https://media.giphy.com/media/FknIfejNbViSs/giphy.gif'],\n      numCols: 3,\n      containerWidth: '100%'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"upl3AsmNNHIkyeTlPdUa3NKm900=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sandro.brayen/Documents/private-project/crypto-asset/src/App.js"],"names":["React","useEffect","useState","ImageMasonry","Chart","Item","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","pairs","btc_idr","asset","name","color","xrp_idr","theta_idr","tfuel_idr","ada_idr","bnb_idr","modal","timer","App","grandTotal","setTotal","summary","setSummary","precent","setPercent","clearInterval","fetchData","res","fetch","cache","data","json","tickers","total","summaryData","keys","Object","i","length","key","coin","last","price","v","Number","growthPercent","toFixed","document","title","format","setTimeout","e","console","log","isLoss","map","padding","width","maxWidth"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ImageMasonry from 'react-image-masonry';\nimport { Chart } from 'react-google-charts';\nimport Item from './components/Item';\nimport './style.css';\n\nconst formatter = new Intl.NumberFormat('id', {\n  style: 'currency',\n  currency: 'IDR',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0\n});\n\nconst pairs = {\n  btc_idr: {\n    asset: 0.01961562,\n    name: 'BTC',\n    color: '#EBAC1C'\n  },\n  xrp_idr: {\n    asset: 156.46,\n    name: 'XRP',\n    color: '#5CACDD'\n  },\n  theta_idr: {\n    asset: 146.9453,\n    name: 'THETA',\n    color: '#5C50DD'\n  },\n  tfuel_idr: {\n    asset: 615.8526,\n    name: 'TFUEL',\n    color: '#CFE542'\n  },\n  ada_idr: {\n    asset: 760.179809,\n    name: 'ADA',\n    color: '#1365EA'\n  },\n  bnb_idr: {\n    asset: 0.7497604,\n    name: 'BNB',\n    color: '#FC5731'\n  }\n};\n\nconst modal = 47371052;\n\nlet timer;\n\nexport default function App() {\n  const [grandTotal, setTotal] = useState(0);\n  const [summary, setSummary] = useState({});\n  const [precent, setPercent] = useState(0);\n\n  useEffect(() => {\n    clearInterval(timer);\n    const fetchData = async () => {\n      try {\n        const res = await fetch(`https://indodax.com/api/summaries`, {\n          cache: 'no-cache'\n        });\n        const data = await res.json();\n\n        const { tickers } = data;\n        let total = 0;\n\n        const summaryData = {};\n\n        let keys = Object.keys(pairs);\n        for (let i = 0; i < keys.length; i++) {\n          let key = keys[i];\n          const coin = pairs[key].asset;\n          const name = pairs[key].name;\n          const color = pairs[key].color;\n          const { last: price } = tickers[key];\n          const v = coin * Number(price);\n          summaryData[key] = {\n            color,\n            name,\n            coin,\n            price: price,\n            total: v\n          };\n          total += v;\n        }\n\n        const growthPercent = ((total - modal) / (modal / 100)).toFixed(1);\n\n        setTotal(total);\n        setSummary(summaryData);\n        setPercent(growthPercent);\n        document.title = `My Gain:  ${formatter.format(\n          total - modal\n        )} (${growthPercent}%)`;\n\n        timer = setTimeout(() => {\n          fetchData();\n        }, 3000);\n      } catch (e) {\n        console.log('error', e);\n        fetchData();\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const isLoss = grandTotal < modal;\n\n  return (\n    <div>\n      <div className=\"table-responsive table-striped\">\n        <table className=\"table\">\n          <thead className=\"thead-dark\">\n            <tr>\n              <th>Asset</th>\n              <th>Price</th>\n              <th>Total</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(summary).map(key => {\n              const { coin, price, total, name } = summary[key];\n              return (\n                <Item\n                  key={key}\n                  coin={coin}\n                  price={price}\n                  name={name}\n                  total={total}\n                />\n              );\n            })}\n            <Item price=\"Total:\" total={grandTotal} isBold />\n          </tbody>\n        </table>\n      </div>\n      <div style={{ padding: 20 }}>\n        {grandTotal > 0 && (\n          <div className={`alert ${isLoss ? 'alert-danger' : 'alert-success'}`}>\n            Gain{' '}\n            <strong>\n              {formatter.format(grandTotal - modal)} ({precent}%)\n            </strong>\n          </div>\n        )}\n      </div>\n      <div style={{ width: 500, maxWidth: '100%' }}>\n        <Chart\n          width={'100%'}\n          height={'300px'}\n          chartType=\"PieChart\"\n          loader={<div>Loading Chart</div>}\n          data={[\n            ['Asset', 'Value'],\n            ...Object.keys(summary).map(key => {\n              const { coin, price, total, name, color } = summary[key];\n              return [name, total];\n            })\n          ]}\n          rootProps={{ 'data-testid': '1' }}\n        />\n      </div>\n      <ImageMasonry\n        imageUrls={[\n          'https://media.giphy.com/media/XUojAIMYIIOQ9tpx2s/giphy.gif',\n          'https://media.giphy.com/media/mz7iww9tCUnJJeZvGN/giphy.gif',\n          'https://media.giphy.com/media/sTgTWEcVGK7CW3BQa7/giphy.gif',\n          'https://media.giphy.com/media/DxbAro4C39Qi5kJmPb/giphy.gif',\n          'https://media.giphy.com/media/qjSxTWJxqH4YDuIrOs/giphy.gif',\n          'https://media.giphy.com/media/KI9oNS4JBemyI/giphy.gif',\n          'https://media.giphy.com/media/7FBY7h5Psqd20/giphy.gif',\n          'https://media.giphy.com/media/Ogak8XuKHLs6PYcqlp/giphy.gif',\n          'https://media.giphy.com/media/FknIfejNbViSs/giphy.gif'\n        ]}\n        numCols={3}\n        containerWidth={'100%'}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}